import React, { useState, useEffect } from 'react'

const InfiniteScroll = () => {
	const [data, setData] = useState([])
	const [loading, setLoading] = useState(false)
	const [page, setPage] = useState(1)

	const fetchData = async () => {
		try {
			setLoading(true)
			const response = await fetch(
				`https://jsonplaceholder.typicode.com/posts?_page=${page}`
			)
			const json = await response.json()
			console.log(json)
			setData((prevData) => [...prevData, ...json])
			setLoading(false)
		} catch (error) {
			setLoading(false)
			console.log(error)
		}
	}

	const handleScroll = () => {
		const { scrollHeight, scrollTop, clientHeight } =
			document.documentElement

		if (scrollTop + clientHeight >= scrollHeight - 10 && !loading) {
			setPage((prevPage) => prevPage + 1)
		}
	}

	useEffect(() => {
		fetchData()
	}, [page])

	useEffect(() => {
		window.addEventListener('scroll', handleScroll)
		return () => {
			window.removeEventListener('scroll', handleScroll)
		}
	}, [loading])

	return (
		<section>
			<div>
				<h1>Infinite Scroll</h1>
				{data &&
					data.map((item) => (
						<div key={item.id}>
							<h1>{item.title}</h1>
							<p>{item.body}</p>
						</div>
					))}
				{loading && <h1>Loading...</h1>}
			</div>
		</section>
	)
}

export default InfiniteScroll
