import React, { useState, useEffect } from "react";

const DynamicTable = ({ columns, defaultSort }) => {
  const [data, setData] = useState([]);
  const [sortColumns, setSortColumns] = useState({
    column: defaultSort.column,
    direction: defaultSort.direction,
  });

  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalPages, setTotalPages] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch(
          "https://jsonplaceholder.typicode.com/users"
        );
        const data = await response.json();
        setData(data);
        setTotalPages(Math.ceil(data.length / rowsPerPage));
      } catch (error) {
        console.log(error);
      }
    };
    fetchData();
  }, [rowsPerPage]);

  const sortData = () => {
    const sortedData = [...data];
    sortedData.sort((a, b) => {
      if (a[sortColumns.column] < b[sortColumns.column]) {
        return sortColumns.direction === "asc" ? -1 : 1;
      }
      if (a[sortColumns.column] > b[sortColumns.column]) {
        return sortColumns.direction === "asc" ? 1 : -1;
      }
      return 0;
    });
    return sortedData;
  };

  const handleSort = (column) => {
    if (column === sortColumns.column) {
      setSortColumns({
        column,
        direction: sortColumns.direction === "asc" ? "desc" : "asc",
      });
    } else {
      setSortColumns({ column, direction: "asc" });
    }
  };

  const paginate = (data) => {
    const startIndex = (currentPage - 1) * rowsPerPage;
    const endIndex = startIndex + rowsPerPage;
    return data.slice(startIndex, endIndex);
  };

  return (
    <div>
      <table>
        <thead>
          <tr>
            {columns.map((column) => (
              <th key={column.key} onClick={() => handleSort(column.key)}>
                {column.value}
                {sortColumns.column === column.key && (
                  <span className={`sort-icon ${sortColumns.direction}`}>
                    &#9650; &#9660;
                  </span>
                )}
              </th>
            ))}
          </tr>
        </thead>
        <tbody>
          {paginate(sortData()).map((item) => (
            <tr key={item.id}>
              {columns.map((column) => (
                <td key={column.key}>{item[column.key]}</td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
      <div>
        <button
          onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
          disabled={currentPage === 1}
        >
          Previous
        </button>
        <span>
          Page {currentPage} of {totalPages}
        </span>
        <button
          onClick={() =>
            setCurrentPage((prev) => Math.min(prev + 1, totalPages))
          }
          disabled={currentPage === totalPages}
        >
          Next
        </button>
      </div>
    </div>
  );
};

const columns = [
  { key: "id", value: "ID" },
  { key: "name", value: "Name" },
  { key: "username", value: "Username" },
  { key: "email", value: "Email" },
];

const defaultSort = {
  column: "id",
  direction: "asc",
};

const App = () => (
  <section>
    <div>
      <h1>Dynamic Table</h1>
      <DynamicTable columns={columns} defaultSort={defaultSort} />
    </div>
  </section>
);

export default App;
